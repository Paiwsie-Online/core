<?php
/*
This file is part of Trust Anchor Groups Smartadmin core
Do not change this file unless you know what you are doing.
*/
namespace api\controllers\core;

use api\components\core\BaseController;
use common\models\core\SystemLog;
use common\models\core\UserLogin;
use common\models\core\UserSetting;
use DateInterval;
use DateTime;
use DateTimeZone;
use Yii;
use yii\filters\auth\HttpBearerAuth;
use yii\web\NotAcceptableHttpException;
use yii\web\NotFoundHttpException;
use yii\web\ServerErrorHttpException;

class UserController extends BaseController {

    public $systemTime;
    public $userClass;
    public $modelClass;

    public function init()
    {
        $this->userClass = new Yii::$app->user->identityClass;
        $this->modelClass = $this->userClass::class;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function behaviors() {
        $behaviors = parent::behaviors();
        // Tells that we use the authenticator only for this operations
        $behaviors['authenticator']['only'] = ['update', 'delete', 'index', 'view'];
        // Set the auth mode to bearer (access token)
        $behaviors['authenticator']['authMethods'] = [
            HttpBearerAuth::class
        ];
        return $behaviors;
    }

    protected function verbs() {
        $verbs = parent::verbs();
        $verbs =  [
            'index' => ['GET', 'POST', 'HEAD'],
            'view' => ['GET', 'HEAD'],
            'create' => ['POST'],
            'update' => ['PUT', 'PATCH']
        ];
        return $verbs;
    }

    // TO OVERWRITE STANDARD CRUD ACTIONS
    // ATTENTION: IF THE FUNCTION IS ACTIVE IS MANDATORY A RETURN ACTION, OTHERWISE DON'T WORKS ALL THE STANDARD CRUD
    public function actions() {
        $actions = parent::actions();
        // To avoid undesired actions
        unset($actions['create']);

        if (isset(Yii::$app->request->headers['authorization'])) {
            $actions['index']['prepareDataProvider'] = function($action) {
                $accessToken = explode(' ', Yii::$app->request->headers['authorization'])[1];
                $user_id = $this->userClass::findIdentityByAccessToken($accessToken);
                // TODO: when active put a check for the API key to permit to admin to see full user list
                if ($user_id) {
                    return new \yii\data\ActiveDataProvider([
                        'query' => $this->userClass::find()->where(['id' => $user_id->id]),
                    ]);
                } else {
                    throw new ServerErrorHttpException(Yii::t('core_system', 'User not set'));
                }
            };
            $actions['view']['checkAccess'] = function($action) {
                return $this->userClass::userHaveRights();
            };
            $actions['update']['checkAccess'] = function($action) {
                return $this->userClass::userHaveRights();
            };
            $actions['delete']['checkAccess'] = function($action) {
                return $this->userClass::userHaveRights();
            };
        } else {
            throw new ServerErrorHttpException(Yii::t('core_system', 'Something went wrong'));
        }
        return $actions;
    }

    // REGISTER A USER TO THE SYSTEM
    public function actionRegister() {
        $model = new $this->userClass;
        // This scenario doesn't have first and last name
        $model->scenario = 'registrationAPI';

        if ($model->load(Yii::$app->getRequest()->getBodyParams(), '')) {
            $userexist = $this->userClass::findOne(['email' => $model->email, 'instance' => Yii::$app->params['default_site_settings']['apiInstance']]);
            if (!$userexist) {
                $model->email = strtolower($model->email);
                $model->email_status = 'unverified';
                $model->first_name = ($model->first_name ? ucwords($model->first_name) : null);
                $model->last_name = ($model->last_name ? ucwords($model->last_name) : null);
                if ($model->temp_password === $model->retype_password) {
                    $model->cid = md5(($model->email . uniqid('', true)));
                    $model->password = Yii::$app->security->generatePasswordHash($model->temp_password);
                }
                $emailVerificationCode = substr(str_shuffle("0123456789"), 0, 4);
                $model->registered = $this->systemTime;
                $model->auth_key = Yii::$app->security->generateRandomString();
                $model->access_token = Yii::$app->security->generateRandomString();
                $model->instance = Yii::$app->params['default_site_settings']['apiInstance'];
                if ($model->save()) {
                    $this->userClass::updateSetting('emailVerificationCode', $emailVerificationCode, $model->id);
                    $systemLog = new SystemLog();
                    $systemLog->user_id = $model->id;
                    $systemLog->instance = $model->instance;
                    $systemLog->message_short = 'User ' . $model->id . ' registered';
                    $systemLog->message = 'User ' . $model->id . ' registered from ip: ' . Yii::$app->request->getUserIP();
/*                    $systemLog->message_short = ($model->first_name ?? '') . ' ' . ($model->last_name ?? '') . ' registered';
                    $systemLog->message = ($model->first_name ?? '') . ' ' . ($model->last_name ?? '') . ' registered from ip: ' . Yii::$app->request->getUserIP();*/
                    $dataFormat = [
                        'event' => 'registered',
                        'user' => $model->id,
                        'ip' => Yii::$app->request->getUserIP(),
                    ];
                    $systemLog->data_format = json_encode($dataFormat);
                    $systemLog->save();
                    $this->sendVerificationEmail($model);
                }
            } else {
                // Code status 406
                throw new NotAcceptableHttpException(Yii::t('core_system', 'This email is associated with an existing user'));
                // Code status 500
                //throw new ServerErrorHttpException(Yii::t('core_system', 'This email is associated with an existing user'));
            }
        }
        return $model;
    }

    // LOGS IN A USER
    public function actionLogin() {
        if (Yii::$app->getRequest()->getBodyParams() !== null) {
            $password = Yii::$app->getRequest()->getBodyParams()['password'];
            $model = $this->userClass::findOne(['email' => Yii::$app->getRequest()->getBodyParams()['email'], 'instance' => Yii::$app->params['default_site_settings']['apiInstance']]);
            if (!$model) {
                // Code status 404
                throw new NotFoundHttpException(Yii::t('core_system', 'User not found'));
                // Code status 500
                //throw new ServerErrorHttpException(Yii::t('core_system', 'User not found'));
            }
            if (crypt($password, $model->password) === $model->password) {
                if ($model->email_status !== 'verified') {
                    // Code status 406
                    throw new NotAcceptableHttpException(Yii::t('core_system', 'This email has not been verified'));
                    // Code status 500
                    //throw new ServerErrorHttpException(Yii::t('core_system', 'This email has not been verified'));
                }
                $systemLog = new SystemLog();
                $systemLog->user_id = $model->id;
                $systemLog->instance = $model->instance;
                $systemLog->message_short = 'User ' . $model->id . ' registered';
                $systemLog->message = 'User ' . $model->id . ' registered from ip: ' . Yii::$app->request->getUserIP();
                $dataFormat = [
                    'event' => 'login',
                    'user' => $model->id,
                    'method' => 'email',
                    'ip' => Yii::$app->request->getUserIP(),
                ];
                $systemLog->data_format = json_encode($dataFormat);
                $systemLog->save();
                $userLogin = new UserLogin();
                $userLogin->user_id = $model->id;
                $userLogin->ip = Yii::$app->request->getUserIP();
                $timeNow = new DateTime('now', new DateTimeZone(Yii::$app->params['defaults']['systemTimeZone']));
                $timeNowUTC =  $timeNow->getTimestamp();
                $userLogin->expire = $timeNowUTC + Yii::$app->params['systemTimeout']['authTimeout'];
                //$userLogin->created_at = $timeNowUTC;
                $userLogin->session_id = Yii::$app->session->id;
                $userLogin->save();
                return $model;
            }
            // Code status 406
            throw new NotAcceptableHttpException(Yii::t('core_system', 'The password did not match'));
            // Code status 500
            //throw new ServerErrorHttpException(Yii::t('core_system', 'The password did not match'));
        }
        // Code status 500
        throw new ServerErrorHttpException(Yii::t('core_system', 'Something went wrong'));
    }

    /**
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\db\StaleObjectException
     * @throws ServerErrorHttpException
     */
    // VERIFY INSERTED CODE TO SETS EMAIL AS VERIFIED
    public function actionEmailVerify() {
        if (Yii::$app->getRequest()->getBodyParams() !== null) {
            $emailVerificationCode = Yii::$app->getRequest()->getBodyParams()['emailVerificationCode'];
            $model = $this->userClass::findOne(['email' => Yii::$app->getRequest()->getBodyParams()['email'], 'instance' => Yii::$app->params['default_site_settings']['apiInstance']]);
            if (!$model) {
                // Code status 404
                throw new NotFoundHttpException(Yii::t('core_system', 'User not found'));
                // Code status 500
                //throw new ServerErrorHttpException(Yii::t('core_system', 'User not found'));
            }
            $model->scenario = 'emailVerify';
            if ($model->email_status === 'verified') {
                // Code status 406
                throw new NotAcceptableHttpException(Yii::t('core_system', 'This email have been already verified'));
                // Code status 500
                //throw new ServerErrorHttpException(Yii::t('core_system', 'This email have been already verified'));
            } else {
                $setting = UserSetting::findOne(['user_id' => $model->id, 'setting' => 'emailVerificationCode']);
                if (isset($setting)) {
                    $settingValue = $setting->value;
                }
                if (!$setting) {
                    // Code status 404
                    throw new NotFoundHttpException(Yii::t('core_system', 'Code not found'));
                    // Code status 500
                    //throw new ServerErrorHttpException(Yii::t('core_system', 'Code not found'));
                }
                if ((string)$settingValue === $emailVerificationCode/* && $now <= $settingExpirationDate*/) {
                    $model->email_status = 'verified';
                    if (!$model->save()) {
                        // Code status 500
                        throw new ServerErrorHttpException(Yii::t('core_system', 'Something went wrong'));
                    }
                    // Delete user setting
                    $setting->delete();
                } else {
                    // Delete user setting
                    $setting->delete();
                    // Code status 406
                    throw new NotAcceptableHttpException(Yii::t('core_system', 'Code expired or not correct'));
                }
                return $model;
            }
        }
        // Code status 500
        throw new ServerErrorHttpException(Yii::t('core_system', 'Something went wrong2'));
    }

    // SEND CODE TO VERIFY EMAIL
    private function sendVerificationEmail($model) {
        $message = $this->getMailHeader();
        $message .= Yii::t('core_email', '<p><b>Dear {first_name} {last_name}</b>, <br>Thank you for registering to {site_name}. </p><p style="margin-top:10px;">In order to complete your registration you must enter the following code to verify your registered email address.</p>{verificationCode}', ['first_name' => $model->first_name, 'last_name' => $model->last_name, 'verificationCode' => $model->userSettingEmailVerificationCode, 'site_name' => (Yii::$app->params['default_site_settings']['site_name'] ?? 'DiggiPet')]);
        $message .= $this->getMailSignature();
        $subject = Yii::t('core_email', 'Verify your email address');
        return $this->sendMail($message, $subject, $model->email);
    }

    // GET HEADER EMAIL
    private function getMailHeader() {
        return '<h2 style="text-align: center">' . (Yii::$app->params['default_site_settings']['site_name'] ?? 'DiggiPet') . '</h2>';
    }

    // GET SIGNATURE EMAIL
    private function getMailSignature() {
        return '<table style="width: 100%; margin-top:30px">
            <tr>
                <td><p><i>This is an automatically generated message, please do not reply to this email.<br>If you wish to send us a message, please, use the contact form on the website</i><p></td>
            </tr>
            <tr><td style="height:20px;"></td></tr>
            <tr>
                <td><b>Kind regards,</b></td>
            </tr>
            <tr>
                <td>Administration</td>
            </tr>
            <tr>
                <td>' . (Yii::$app->params['default_site_settings']['site_name'] ?? 'DiggiPet') . '</td>
            </tr>
        </table>';
    }

    // SEND EMAIL
    private function sendMail($message, $subject, $email) {
        Yii::$app->mailer->compose()
            ->setFrom([Yii::$app->params['senderEmail'] => Yii::$app->params['senderName']])
            ->setReplyTo([Yii::$app->params['senderEmail'] => Yii::$app->params['senderName']])
            ->setTo($email)
            ->setSubject($subject)
            ->setTextBody($message)
            ->setHtmlBody($message)
            ->send();
        return 'OK';
    }

    // FORGOT PASSWORD EMAIL PAGE
    public function actionForgotpw() {
        //$this->scenario = 'forgotpw';
        if (Yii::$app->request->bodyParams) {
            $email = strtolower(Yii::$app->request->bodyParams['email']);
            $model = $this->userClass::findOne(['email' => $email, 'instance' => Yii::$app->params['default_site_settings']['apiInstance']]);
            $model->scenario = 'forgotpw';
            if (isset($model->email_status) && $model->email_status === 'verified') {
                $forgotPasswordVerificationCode = substr(str_shuffle("0123456789"), 0, 4);
                $verificationCodeArr = [
                    'code' => $forgotPasswordVerificationCode,
                    'date' => $this->systemTime
                ];
                $this->userClass::updateSetting('forgotPasswordVerificationCode', json_encode($verificationCodeArr), $model->id);
                $model->temp_password = $model->retype_password = '123Abc';
                if ($model->save()) {
                    $systemLog = new SystemLog();
                    $systemLog->user_id = $model->id;
                    $systemLog->instance = $model->instance;
                    $systemLog->message_short = 'User ' . $model->id . ' forgot password';
                    $systemLog->message = 'User ' . $model->id . ' asked to new password from ip: ' . Yii::$app->request->getUserIP();
                    $dataFormat = [
                        'event' => 'emailSentForgotPw',
                        'user' => $model->id,
                        'ip' => Yii::$app->request->getUserIP(),
                    ];
                    $systemLog->data_format = json_encode($dataFormat);
                    $systemLog->save();
                    $this->sendForgotPassword($model);
                }
            } else {
                // Code status 406
                throw new NotAcceptableHttpException(Yii::t('core_system', 'This email has not been verified yet'));
            }
        } else {
            // Code status 500
            throw new ServerErrorHttpException(Yii::t('core_system', 'This email is associated with an existing user'));
        }
    }

    // SEND PASSWORD RESET EMAIL
    protected function sendForgotPassword($model) {
        $message = $this->getMailHeader();
        $message .= Yii::t('core_email', '<p><b>Dear user</b>,<br>You have initiated a password reset request.</p><p style="margin-top:10px;">In order to complete, you must enter the following code then type and save the new password.<br>{verificationCode}', ['verificationCode' => $model->userSettingForgotPasswordVerificationCode->code]);
        $message .= $this->getMailSignature();
        $subject = Yii::t('core_email', 'Forgot password requested');
        return $this->sendMail($message, $subject, $model->email);
    }

    /**
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\db\StaleObjectException
     * @throws ServerErrorHttpException
     */
    // VERIFY INSERTED CODE TO AUTHORIZE THE PASSWORD CHANGE
    public function actionForgotPasswordVerify() {
        if (Yii::$app->getRequest()->getBodyParams() !== null) {
            $forgotPasswordVerificationCode = Yii::$app->getRequest()->getBodyParams()['forgotPasswordVerificationCode'];
            $model = $this->userClass::findOne(['email' => Yii::$app->getRequest()->getBodyParams()['email'], 'instance' => Yii::$app->params['default_site_settings']['apiInstance']]);
            if (!$model) {
                // Code status 404
                throw new NotFoundHttpException(Yii::t('core_system', 'User not found'));
                // Code status 500
                //throw new ServerErrorHttpException(Yii::t('core_system', 'User not found'));
            }
            $model->scenario = 'forgotPasswordVerify';

            $setting = UserSetting::findOne(['user_id' => $model->id, 'setting' => 'forgotPasswordVerificationCode']);
            if (isset($setting)) {
                $settingValue = json_decode($setting->value);
            }
            if (!$setting) {
                // Code status 404
                throw new NotFoundHttpException(Yii::t('core_system', 'Code not found'));
                // Code status 500
                //throw new ServerErrorHttpException(Yii::t('core_system', 'Code not found'));
            }
            $secondsActiveCode = 300;
            $now = $this->systemTime;
            $dt = new DateTime($settingValue->date, new DateTimeZone(Yii::$app->params['defaults']['systemTimeZone']));
            $settingExpirationDate = $dt->add(new DateInterval('PT' . $secondsActiveCode . 'S'))->format('Y-m-d H:i:s');
            if ((string)$settingValue->code === $forgotPasswordVerificationCode && $now <= $settingExpirationDate) {
                if (Yii::$app->getRequest()->getBodyParams()['temp_password'] === Yii::$app->getRequest()->getBodyParams()['retype_password']) {
                    $model->password = Yii::$app->security->generatePasswordHash(Yii::$app->getRequest()->getBodyParams()['temp_password']);
                    $model->email_status = 'verified';
                    if ($model->save()) {
                        $this->sendPasswordChangeConfirmation($model);
                    } else {
                        // Code status 500
                        throw new ServerErrorHttpException(Yii::t('core_system', 'Something went wrong'));
                    };
                    // Delete user setting
                    $setting->delete();
                } else {
                    // Code status 406
                    throw new NotAcceptableHttpException(Yii::t('core_system', 'The password did not match'));
                }
            } else {
                // Delete user setting
                $setting->delete();
                // Code status 406
                throw new NotAcceptableHttpException(Yii::t('core_system', 'Code expired or not correct'));
            }
            return $model;
        }
        // Code status 500
        throw new ServerErrorHttpException(Yii::t('core_system', 'Something went wrong'));
    }

    // RESEND EMAIL VERIFICATION CODE
    public function actionResendCode() {
        if (Yii::$app->request->bodyParams) {
            $email = strtolower(Yii::$app->request->bodyParams['email']);
            $model = $this->userClass::findOne(['email' => $email, 'instance' => Yii::$app->params['default_site_settings']['apiInstance']]);
            if ($model) {
                $model->scenario = 'resendcode';
                if (isset($model->email_status) && $model->email_status !== 'verified') {
                    $this->sendVerificationEmail($model);
                } else {
                    // Code status 406
                    throw new NotAcceptableHttpException(Yii::t('core_system', 'This email has been verified yet'));
                }
            } else {
                // Code status 404
                throw new NotFoundHttpException(Yii::t('core_system', 'User not found'));
            }
        } else {
            throw new ServerErrorHttpException(Yii::t('core_system', 'Something went wrong'));
        }
    }

    // SEND CONFIRMATION EMAIL FOR CHANGE PASSWORD
    protected function sendPasswordChangeConfirmation($model) {
        $message = $this->getMailHeader();
        $message .= Yii::t('core_email', '<p><b>Dear user</b>,<br>You have succesfully changed your password.</p>');
        $message .= $this->getMailSignature();
        $subject = Yii::t('core_email', 'Confirmation password change');
        return $this->sendMail($message, $subject, $model->email);
    }

}